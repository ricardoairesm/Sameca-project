generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Courses {
  id           Int            @id(map: "Courses_pk") @default(autoincrement())
  name         String         @unique
  createdAt    DateTime       @default(dbgenerated("'2023-06-05 13:17:57.063005'::timestamp without time zone")) @db.Timestamp(6)
  updatedAt    DateTime       @default(dbgenerated("'2023-06-05 13:17:57.063005'::timestamp without time zone")) @db.Timestamp(6)
  Requirements Requirements[]
}

model ICs {
  id                 Int            @id(map: "ICs_pk") @default(autoincrement())
  name               String         @unique
  description        String
  image              String
  gratification      String
  gratificationSpots Int
  teacherId          Int
  createdAt          DateTime       @default(dbgenerated("'2023-06-05 13:17:57.063005'::timestamp without time zone")) @db.Timestamp(6)
  updatedAt          DateTime       @default(dbgenerated("'2023-06-05 13:17:57.063005'::timestamp without time zone")) @db.Timestamp(6)
  Teachers           Teachers       @relation(fields: [teacherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ICs_fk0")
  Likes              Likes[]
  Requirements       Requirements[]
}

model Requirements {
  id        Int     @id(map: "Requirements_pk") @default(autoincrement())
  ICSId     Int
  CoursesId Int
  Courses   Courses @relation(fields: [CoursesId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Requirements_fk1")
  ICs       ICs     @relation(fields: [ICSId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Requirements_fk0")
}

model Sessions {
  id        Int      @id(map: "Sessions_pk") @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(dbgenerated("'2023-06-05'::date")) @db.Date
  updatedAt DateTime @default(dbgenerated("'2023-06-05'::date")) @db.Date
  Users     Users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Sessions_fk0")
}

model Teachers {
  id        Int      @id(map: "Teachers_pk") @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(dbgenerated("'2023-06-05 13:17:57.063005'::timestamp without time zone")) @db.Timestamp(6)
  updatedAt DateTime @default(dbgenerated("'2023-06-05 13:17:57.063005'::timestamp without time zone")) @db.Timestamp(6)
  ICs       ICs[]
}

model Users {
  id        Int        @id(map: "Users_pk") @default(autoincrement())
  createdAt DateTime   @default(dbgenerated("'2023-06-05 13:17:57.063005'::timestamp without time zone")) @db.Timestamp(6)
  updatedAt DateTime   @default(dbgenerated("'2023-06-05 13:17:57.063005'::timestamp without time zone")) @db.Timestamp(6)
  password  String?
  email     String     @unique
  name      String
  Likes     Likes[]
  Sessions  Sessions[]
}

model Likes {
  id     Int   @id(map: "Likes_pk") @default(autoincrement())
  userId Int
  icId   Int
  ICs    ICs   @relation(fields: [icId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Likes_fk1")
  Users  Users @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Likes_fk0")
}
